// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  cartItems CartItem[]

  @@map("users")
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          Float
  originalPrice  Float?
  images         String[]
  category       String
  description    String
  features       String[]
  specifications Json // Record<string, string>
  inStock        Boolean  @default(true)
  stockCount     Int      @default(0)
  rating         Float    @default(0)
  reviewCount    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
  reviews    Review[]
  cartItems  CartItem[]

  @@map("products")
}

model Order {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  customerName String
  phone        String
  address      String
  notes        String?
  total        Float
  status       OrderStatus @default(NEW)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  name      String
  price     Float
  quantity  Int
  image     String

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  userName  String
  rating    Int      @default(1) // 1-5 stars
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  userId    String @db.ObjectId
  name      String
  price     Float
  image     String
  quantity  Int

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model UploadedFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String   @unique
  url       String
  size      Int
  mimetype  String
  createdAt DateTime @default(now())

  @@map("uploaded_files")
}

enum OrderStatus {
  NEW
  NEGOTIATING
  SHIPPING
  COMPLETED
}
